// Function declarations
coach striker calculateBonus(striker goals) {
    striker bonus;
    var (goals > 10) {
        bonus = 5;
    } no_penalty {
        bonus = 2;
    }
    final_whistle bonus;
}

coach keeper calculateAverage(striker goals, keeper matches) {
    keeper avg;
    avg = goals / matches;
    final_whistle avg;
}

coach midfielder determineRank(striker goals, keeper avg) {
    var (goals > 20 tackle avg > 1.0) {
        final_whistle "World Class";
    } no_penalty {
        var (goals > 10 tackle avg > 0.5) {
            final_whistle "Professional";
        } no_penalty {
            final_whistle "Amateur";
        }
    }
}

// Main function
kickoff() {
    // 1. Variable declarations
    striker goals;
    striker bonus;
    striker matches;
    keeper average;
    defender grade;
    midfielder name;
    midfielder rank;
    
    // 2. Basic input/output
    goal("=== Football Career Management System ===\n");
    
    goal("Enter player name: ");
    shot(name);
    
    goal("Enter total goals: ");
    shot(goals);
    
    goal("Enter matches played: ");
    shot(matches);
    
    // 3. Function calls
    bonus = calculateBonus(goals);
    average = calculateAverage(goals, matches);
    rank = determineRank(goals, average);
    
    // 4. Arithmetic operations
    striker totalGoals;
    totalGoals = goals + bonus;
    
    // 5. If-else conditions
    var (totalGoals > 15) {
        goal("\nExceptional Goal Scorer!\n");
        var (average > 1.0) {
            grade = 'A';
        } no_penalty {
            grade = 'B';
        }
    } no_penalty {
        var (totalGoals > 10) {
            goal("\nGood Goal Scorer!\n");
            grade = 'C';
        } no_penalty {
            goal("\nNeeds Improvement!\n");
            grade = 'D';
        }
    }
    
    // 6. For loop (dribble)
    goal("\nPerformance Analysis:\n");
    dribble (striker i = 0; i < 3; i = i + 1) {
        keeper projectedAvg;
        projectedAvg = calculateAverage(totalGoals + i, matches);
        goal("Projected average with ");
        goal(totalGoals + i);
        goal(" goals: ");
        goal(projectedAvg);
        goal("\n");
        
        var (i == 1) {
            yellow_card;    // continue
        }
    }
    
    // 7. While loop (run)
    striker targetGoals;
    targetGoals = totalGoals;
    run (targetGoals < 25) {
        goal("Goals needed for World Class: ");
        goal(25 - targetGoals);
        goal("\n");
        targetGoals = targetGoals + 5;
    }
    
    // 8. Final Statistics
    goal("\nPlayer Statistics:\n");
    goal("==================\n");
    goal("Name: ");
    goal(name);
    goal("\nMatches: ");
    goal(matches);
    goal("\nBase Goals: ");
    goal(goals);
    goal("\nBonus Goals: ");
    goal(bonus);
    goal("\nTotal Goals: ");
    goal(totalGoals);
    goal("\nGoal Average: ");
    goal(average);
    goal("\nPlayer Rank: ");
    goal(rank);
    goal("\nPerformance Grade: ");
    goal(grade);
    goal("\n");
    
    // 9. Error testing
    var (average > 0) {
        striker errorTest;
        errorTest = average;    // Error: Type mismatch
        goal(errorTest);
    }
    
    final_whistle 0;
}